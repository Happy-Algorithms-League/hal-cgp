.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_example_caching.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_example_caching.py:


Example demonstrating the use of the caching decorator.
=======================================================

Caches the results of fitness evaluations in a pickle file
('example_caching_cache.pkl'). To illustrate its practical use,
compare the runtime of this script when you first call it vs. the
second time and when you comment out the decorator on
`inner_objective`.


.. code-block:: default


    import numpy as np
    import time

    import cgp


We define the target function for this example.


.. code-block:: default



    def f_target(x):
        return x ** 2 + x + 1.0



We then define the objective function for the evolutionary
algorithm: It consists of an inner objective which we wrap with the
caching decorator. This decorator specifies a pickle file that will be used for
caching results of fitness evaluations. The inner objective is then used by the objective
function to compute (or retrieve from cache) the fitness of the individual.


.. code-block:: default



    @cgp.utils.disk_cache("example_caching_cache.pkl")
    def inner_objective(expr):
        """The caching decorator uses the function parameters to identify
        identical function calls. Here, as many different genotypes
        produce the same simplified SymPy expression we can use such
        expressions as an argument to the decorated function to avoid
        reevaluating functionally identical individuals.
        Note that caching only makes sense for deterministic objective
        functions, as it assumes that identical expressions will always
        return the same fitness values.

        """
        loss = []
        for x0 in np.linspace(-2.0, 2.0, 100):
            y = float(expr[0].subs({"x_0": x0}).evalf())
            loss.append((f_target(x0) - y) ** 2)

        time.sleep(0.25)  # emulate long fitness evaluation

        return np.mean(loss)


    def objective(individual):
        if individual.fitness is not None:
            return individual

        individual.fitness = -inner_objective(individual.to_sympy())

        return individual



Next, we define the parameters for the population, the genome of
individuals, and the evolutionary algorithm.


.. code-block:: default



    params = {
        "population_params": {"n_parents": 10, "mutation_rate": 0.05, "seed": 8188211},
        "ea_params": {"n_offsprings": 10, "n_breeding": 10, "tournament_size": 1, "n_processes": 1},
        "genome_params": {
            "n_inputs": 1,
            "n_outputs": 1,
            "n_columns": 10,
            "n_rows": 2,
            "levels_back": 2,
            "primitives": (cgp.Add, cgp.Sub, cgp.Mul, cgp.ConstantFloat),
        },
        "evolve_params": {"max_generations": 100, "min_fitness": -1e-12},
    }


We then create a Population instance and instantiate the evolutionary algorithm.


.. code-block:: default



    pop = cgp.Population(**params["population_params"], genome_params=params["genome_params"])
    ea = cgp.ea.MuPlusLambda(**params["ea_params"])


Finally, we call the `evolve` method to perform the evolutionary search.


.. code-block:: default



    cgp.evolve(pop, objective, ea, **params["evolve_params"], print_progress=True)


    print(f"evolved function: {pop.champion.to_sympy()}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_example_caching.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_caching.py <example_caching.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_caching.ipynb <example_caching.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
