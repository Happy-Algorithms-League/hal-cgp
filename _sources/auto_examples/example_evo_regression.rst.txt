.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_example_evo_regression.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_example_evo_regression.py:


Example for evolutionary regression
===================================

Example demonstrating the use of Cartesian genetic programming for
two regression tasks.


.. code-block:: default


    # The docopt str is added explicitly to ensure compatibility with
    # sphinx-gallery.
    docopt_str = """
       Usage:
         example_evo_regression.py [--max-generations=<N>]

       Options:
         -h --help
         --max-generations=<N>  Maximum number of generations [default: 1000]
    """

    import functools
    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import scipy.constants
    from docopt import docopt

    import cgp

    args = docopt(docopt_str)








We first define target functions. For illustration purposes, we
define two functions which present different levels of difficulty
for the search.


.. code-block:: default



    def f_target_easy(x):
        return x[:, 0] ** 2 + 2 * x[:, 0] * x[:, 1] + x[:, 1] ** 2


    def f_target_hard(x):
        return 1.0 + 1.0 / (x[:, 0] + x[:, 1])









Then we define the objective function for the evolution. It uses the
mean-squared error between the expression represented by a given
individual and the target function evaluated on a set of random
points.


.. code-block:: default



    def objective(individual, target_function, seed):
        """Objective function of the regression task.

        Parameters
        ----------
        individual : Individual
            Individual of the Cartesian Genetic Programming Framework.
        target_function : Callable
            Target function.

        Returns
        -------
        Individual
            Modified individual with updated fitness value.
        """
        if individual.fitness is not None:
            return individual

        n_function_evaluations = 1000

        np.random.seed(seed)

        f_graph = individual.to_func()
        y = np.empty(n_function_evaluations)
        x = np.random.uniform(-4, 4, size=(n_function_evaluations, 2))
        for i, x_i in enumerate(x):
            with warnings.catch_warnings():  # ignore warnings due to zero division
                warnings.filterwarnings(
                    "ignore", message="divide by zero encountered in double_scalars"
                )
                warnings.filterwarnings(
                    "ignore", message="invalid value encountered in double_scalars"
                )
                try:
                    y[i] = f_graph(x_i)[0]
                except ZeroDivisionError:
                    individual.fitness = -np.inf
                    return individual

        loss = np.mean((target_function(x) - y) ** 2)
        individual.fitness = -loss

        return individual









Next, we define the main loop of the evolution. To easily execute it
for different target functions, we wrap it into a function here. It
comprises:

- defining the parameters for the population, the genome of individuals,
  and the evolutionary algorithm.
- creating a Population instance and instantiating the evolutionary algorithm.
- defining a recording callback closure for bookkeeping of the progression of the evolution.

Finally, we call the `evolve` method to perform the evolutionary search.


.. code-block:: default



    def evolution(f_target):
        """Execute CGP on a regression task for a given target function.

        Parameters
        ----------
        f_target : Callable
            Target function

        Returns
        -------
        dict
            Dictionary containing the history of the evolution
        Individual
            Individual with the highest fitness in the last generation
        """
        population_params = {"n_parents": 10, "mutation_rate": 0.03, "seed": 8188211}

        genome_params = {
            "n_inputs": 2,
            "n_outputs": 1,
            "n_columns": 12,
            "n_rows": 2,
            "levels_back": 5,
            "primitives": (cgp.Add, cgp.Sub, cgp.Mul, cgp.Div, cgp.ConstantFloat),
        }

        ea_params = {"n_offsprings": 10, "tournament_size": 2, "n_processes": 2}

        evolve_params = {"max_generations": int(args["--max-generations"]), "min_fitness": 0.0}

        # create population that will be evolved
        pop = cgp.Population(**population_params, genome_params=genome_params)

        # create instance of evolutionary algorithm
        ea = cgp.ea.MuPlusLambda(**ea_params)

        # define callback for recording of fitness over generations
        history = {}
        history["fitness_parents"] = []

        def recording_callback(pop):
            history["fitness_parents"].append(pop.fitness_parents())

        # the objective passed to evolve should only accept one argument,
        # the individual
        obj = functools.partial(objective, target_function=f_target, seed=population_params["seed"])

        # Perform the evolution
        cgp.evolve(pop, obj, ea, **evolve_params, print_progress=True, callback=recording_callback)
        return history, pop.champion









We execute the evolution for the two different target functions
('easy' and 'hard').  After finishing the evolution, we plot the
result and log the final evolved expression.


.. code-block:: default



    if __name__ == "__main__":
        width = 9.0
        fig, axes = plt.subplots(2, 2, figsize=(width, width / scipy.constants.golden))

        for i, (label, target_function) in enumerate(
            zip(["easy", "hard"], [f_target_easy, f_target_hard])
        ):
            history, champion = evolution(target_function)

            ax_fitness, ax_function = axes[i]
            ax_fitness.set_xlabel("Generation")
            ax_fitness.set_ylabel("Fitness")

            history_fitness = np.array(history["fitness_parents"])
            ax_fitness.plot(np.max(history_fitness, axis=1), label="Champion")
            ax_fitness.plot(np.mean(history_fitness, axis=1), label="Population mean")

            ax_fitness.set_yscale("symlog")
            ax_fitness.set_ylim(-1.0e4, 0.0)
            ax_fitness.legend()

            f_graph = champion.to_func()
            x_0_range = np.linspace(-5.0, 5.0, 20)
            x_1_range = np.ones_like(x_0_range) * 2.0
            # fix x_1 such than 1d plot makes sense
            y = [f_graph([x_0, x_1_range[0]]) for x_0 in x_0_range]
            y_target = target_function(np.hstack([x_0_range.reshape(-1, 1), x_1_range.reshape(-1, 1)]))

            ax_function.plot(x_0_range, y_target, lw=2, alpha=0.5, label="Target")
            ax_function.plot(x_0_range, y, "x", label="Champion")
            ax_function.legend()
            ax_function.set_ylabel(r"$f(x)$")
            ax_function.set_xlabel(r"$x$")

        fig.savefig("example_evo_regression.pdf")



.. image:: /auto_examples/images/sphx_glr_example_evo_regression_001.png
    :alt: example evo regression
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [2/1000] max fitness: -167.65489269691514[K    [3/1000] max fitness: -167.65489269691514[K    [4/1000] max fitness: -167.65489269691514[K    [5/1000] max fitness: -167.65489269691514[K    [6/1000] max fitness: -167.65489269691514[K    [7/1000] max fitness: -167.65489269691514[K    [8/1000] max fitness: -167.65489269691514[K    [9/1000] max fitness: -167.65489269691514[K    [10/1000] max fitness: -167.65489269691514[K    [11/1000] max fitness: -167.65489269691514[K    [12/1000] max fitness: -167.65489269691514[K    [13/1000] max fitness: -160.6314543602012[K    [14/1000] max fitness: -160.6314543602012[K    [15/1000] max fitness: -160.6314543602012[K    [16/1000] max fitness: -160.6314543602012[K    [17/1000] max fitness: -160.6314543602012[K    [18/1000] max fitness: -160.6314543602012[K    [19/1000] max fitness: -160.6314543602012[K    [20/1000] max fitness: -160.6314543602012[K    [21/1000] max fitness: -160.6314543602012[K    [22/1000] max fitness: -160.6314543602012[K    [23/1000] max fitness: -160.6314543602012[K    [24/1000] max fitness: -160.6314543602012[K    [25/1000] max fitness: -160.6314543602012[K    [26/1000] max fitness: -160.6314543602012[K    [27/1000] max fitness: -160.6314543602012[K    [28/1000] max fitness: -160.6314543602012[K    [29/1000] max fitness: -160.6314543602012[K    [30/1000] max fitness: -160.6314543602012[K    [31/1000] max fitness: -160.6314543602012[K    [32/1000] max fitness: -160.6314543602012[K    [33/1000] max fitness: -160.6314543602012[K    [34/1000] max fitness: -160.6314543602012[K    [35/1000] max fitness: -160.6314543602012[K    [36/1000] max fitness: -160.6314543602012[K    [37/1000] max fitness: -160.6314543602012[K    [38/1000] max fitness: -160.6314543602012[K    [39/1000] max fitness: -160.6314543602012[K    [40/1000] max fitness: -160.6314543602012[K    [41/1000] max fitness: -160.6314543602012[K    [42/1000] max fitness: -160.6314543602012[K    [43/1000] max fitness: -160.6314543602012[K    [44/1000] max fitness: -160.6314543602012[K    [45/1000] max fitness: -160.6314543602012[K    [46/1000] max fitness: -160.6314543602012[K    [47/1000] max fitness: -160.6314543602012[K    [48/1000] max fitness: -160.6314543602012[K    [49/1000] max fitness: -160.6314543602012[K    [50/1000] max fitness: -160.6314543602012[K    [51/1000] max fitness: -160.6314543602012[K    [52/1000] max fitness: -160.6314543602012[K    [53/1000] max fitness: -160.6314543602012[K    [54/1000] max fitness: -160.6314543602012[K    [55/1000] max fitness: -160.6314543602012[K    [56/1000] max fitness: -160.6314543602012[K    [57/1000] max fitness: -160.6314543602012[K    [58/1000] max fitness: -160.6314543602012[K    [59/1000] max fitness: -160.6314543602012[K    [60/1000] max fitness: -160.6314543602012[K    [61/1000] max fitness: -160.6314543602012[K    [62/1000] max fitness: -160.6314543602012[K    [63/1000] max fitness: -160.6314543602012[K    [64/1000] max fitness: -160.6314543602012[K    [65/1000] max fitness: -160.6314543602012[K    [66/1000] max fitness: -160.6314543602012[K    [67/1000] max fitness: -160.6314543602012[K    [68/1000] max fitness: -160.6314543602012[K    [69/1000] max fitness: -160.6314543602012[K    [70/1000] max fitness: -160.6314543602012[K    [71/1000] max fitness: -160.6314543602012[K    [72/1000] max fitness: -160.6314543602012[K    [73/1000] max fitness: -160.6314543602012[K    [74/1000] max fitness: -85.97802271860196[K    [75/1000] max fitness: -85.97802271860196[K    [76/1000] max fitness: -85.97802271860196[K    [77/1000] max fitness: -85.97802271860196[K    [78/1000] max fitness: -85.97802271860196[K    [79/1000] max fitness: -85.97802271860196[K    [80/1000] max fitness: -85.97802271860196[K    [81/1000] max fitness: -85.97802271860196[K    [82/1000] max fitness: -85.97802271860196[K    [83/1000] max fitness: -85.97802271860196[K    [84/1000] max fitness: -85.97802271860196[K    [85/1000] max fitness: -85.97802271860196[K    [86/1000] max fitness: -85.97802271860196[K    [87/1000] max fitness: -85.97802271860196[K    [88/1000] max fitness: -85.97802271860196[K    [89/1000] max fitness: -85.97802271860196[K    [90/1000] max fitness: -85.97802271860196[K    [91/1000] max fitness: -85.97802271860196[K    [92/1000] max fitness: -85.97802271860196[K    [93/1000] max fitness: -85.97802271860196[K    [94/1000] max fitness: -85.97802271860196[K    [95/1000] max fitness: -85.97802271860196[K    [96/1000] max fitness: -85.97802271860196[K    [97/1000] max fitness: -85.97802271860196[K    [98/1000] max fitness: -85.97802271860196[K    [99/1000] max fitness: -85.97802271860196[K    [100/1000] max fitness: -85.97802271860196[K    [101/1000] max fitness: -85.97802271860196[K    [102/1000] max fitness: -85.97802271860196[K    [103/1000] max fitness: -85.97802271860196[K    [104/1000] max fitness: -85.97802271860196[K    [105/1000] max fitness: -85.97802271860196[K    [106/1000] max fitness: -85.97802271860196[K    [107/1000] max fitness: -85.97802271860196[K    [108/1000] max fitness: -85.97802271860196[K    [109/1000] max fitness: -85.97802271860196[K    [110/1000] max fitness: -85.97802271860196[K    [111/1000] max fitness: -85.97802271860196[K    [112/1000] max fitness: -85.97802271860196[K    [113/1000] max fitness: -85.97802271860196[K    [114/1000] max fitness: -85.97802271860196[K    [115/1000] max fitness: -85.97802271860196[K    [116/1000] max fitness: -73.34623704346669[K    [117/1000] max fitness: -73.34623704346669[K    [118/1000] max fitness: -73.34623704346669[K    [119/1000] max fitness: -73.34623704346669[K    [120/1000] max fitness: -67.58590475398107[K    [121/1000] max fitness: -67.58590475398107[K    [122/1000] max fitness: -67.58590475398107[K    [123/1000] max fitness: -67.58590475398107[K    [124/1000] max fitness: -67.58590475398107[K    [125/1000] max fitness: -67.58590475398107[K    [126/1000] max fitness: -67.58590475398107[K    [127/1000] max fitness: -67.58590475398107[K    [128/1000] max fitness: -67.58590475398107[K    [129/1000] max fitness: -67.58590475398107[K    [130/1000] max fitness: -67.58590475398107[K    [131/1000] max fitness: -67.58590475398107[K    [132/1000] max fitness: -67.58590475398107[K    [133/1000] max fitness: -67.58590475398107[K    [134/1000] max fitness: -67.58590475398107[K    [135/1000] max fitness: -67.58590475398107[K    [136/1000] max fitness: -67.58590475398107[K    [137/1000] max fitness: -67.58590475398107[K    [138/1000] max fitness: -67.58590475398107[K    [139/1000] max fitness: -67.58590475398107[K    [140/1000] max fitness: -67.58590475398107[K    [141/1000] max fitness: -67.58590475398107[K    [142/1000] max fitness: -67.58590475398107[K    [143/1000] max fitness: -67.58590475398107[K    [144/1000] max fitness: -53.29103121466562[K    [145/1000] max fitness: -53.29103121466562[K    [146/1000] max fitness: -53.29103121466562[K    [147/1000] max fitness: -53.29103121466562[K    [148/1000] max fitness: -53.29103121466562[K    [149/1000] max fitness: -51.21018762995419[K    [150/1000] max fitness: -51.21018762995419[K    [151/1000] max fitness: -51.21018762995419[K    [152/1000] max fitness: -47.53280829923878[K    [153/1000] max fitness: -47.53280829923878[K    [154/1000] max fitness: -47.53280829923878[K    [155/1000] max fitness: -47.53280829923878[K    [156/1000] max fitness: -47.53280829923878[K    [157/1000] max fitness: -47.53280829923878[K    [158/1000] max fitness: -47.53280829923878[K    [159/1000] max fitness: -39.52453493204918[K    [160/1000] max fitness: -39.52453493204918[K    [161/1000] max fitness: -39.52453493204918[K    [162/1000] max fitness: -39.52453493204918[K    [163/1000] max fitness: -39.52453493204918[K    [164/1000] max fitness: -39.52453493204918[K    [165/1000] max fitness: -39.52453493204918[K    [166/1000] max fitness: -39.52453493204918[K    [167/1000] max fitness: -39.52453493204918[K    [168/1000] max fitness: -35.431929489295314[K    [169/1000] max fitness: -35.431929489295314[K    [170/1000] max fitness: -35.431929489295314[K    [171/1000] max fitness: -35.431929489295314[K    [172/1000] max fitness: -35.431929489295314[K    [173/1000] max fitness: -35.431929489295314[K    [174/1000] max fitness: -35.431929489295314[K    [175/1000] max fitness: -35.431929489295314[K    [176/1000] max fitness: -35.431929489295314[K    [177/1000] max fitness: -35.431929489295314[K    [178/1000] max fitness: -35.431929489295314[K    [179/1000] max fitness: -35.431929489295314[K    [180/1000] max fitness: -35.431929489295314[K    [181/1000] max fitness: -35.431929489295314[K    [182/1000] max fitness: -35.431929489295314[K    [183/1000] max fitness: -35.431929489295314[K    [184/1000] max fitness: -35.431929489295314[K    [185/1000] max fitness: -35.431929489295314[K    [186/1000] max fitness: -35.431929489295314[K    [187/1000] max fitness: -35.431929489295314[K    [188/1000] max fitness: -35.431929489295314[K    [189/1000] max fitness: -35.431929489295314[K    [190/1000] max fitness: -35.431929489295314[K    [191/1000] max fitness: -35.431929489295314[K    [192/1000] max fitness: -35.431929489295314[K    [193/1000] max fitness: -35.431929489295314[K    [194/1000] max fitness: -35.431929489295314[K    [195/1000] max fitness: -35.431929489295314[K    [196/1000] max fitness: -35.431929489295314[K    [197/1000] max fitness: -35.431929489295314[K    [198/1000] max fitness: -35.431929489295314[K    [199/1000] max fitness: -35.431929489295314[K    [200/1000] max fitness: -35.431929489295314[K    [201/1000] max fitness: -35.431929489295314[K    [202/1000] max fitness: -35.431929489295314[K    [203/1000] max fitness: -35.431929489295314[K    [204/1000] max fitness: -35.431929489295314[K    [205/1000] max fitness: -35.431929489295314[K    [206/1000] max fitness: -35.431929489295314[K    [207/1000] max fitness: -35.431929489295314[K    [208/1000] max fitness: -35.431929489295314[K    [209/1000] max fitness: -35.431929489295314[K    [210/1000] max fitness: -35.431929489295314[K    [211/1000] max fitness: -35.431929489295314[K    [212/1000] max fitness: -35.431929489295314[K    [213/1000] max fitness: -35.431929489295314[K    [214/1000] max fitness: -35.431929489295314[K    [215/1000] max fitness: -35.431929489295314[K    [216/1000] max fitness: -35.431929489295314[K    [217/1000] max fitness: -35.431929489295314[K    [218/1000] max fitness: -35.431929489295314[K    [219/1000] max fitness: -35.431929489295314[K    [220/1000] max fitness: -35.431929489295314[K    [221/1000] max fitness: -35.431929489295314[K    [222/1000] max fitness: -35.431929489295314[K    [223/1000] max fitness: -35.431929489295314[K    [224/1000] max fitness: -35.431929489295314[K    [225/1000] max fitness: -35.431929489295314[K    [226/1000] max fitness: -35.431929489295314[K    [227/1000] max fitness: -35.431929489295314[K    [228/1000] max fitness: -35.431929489295314[K    [229/1000] max fitness: -35.431929489295314[K    [230/1000] max fitness: -35.431929489295314[K    [231/1000] max fitness: -35.431929489295314[K    [232/1000] max fitness: -35.431929489295314[K    [233/1000] max fitness: -35.431929489295314[K    [234/1000] max fitness: -35.431929489295314[K    [235/1000] max fitness: -35.431929489295314[K    [236/1000] max fitness: -35.431929489295314[K    [237/1000] max fitness: -35.431929489295314[K    [238/1000] max fitness: -35.431929489295314[K    [239/1000] max fitness: -35.431929489295314[K    [240/1000] max fitness: -35.431929489295314[K    [241/1000] max fitness: -35.431929489295314[K    [242/1000] max fitness: -35.431929489295314[K    [243/1000] max fitness: -35.431929489295314[K    [244/1000] max fitness: -35.431929489295314[K    [245/1000] max fitness: -35.431929489295314[K    [246/1000] max fitness: -35.431929489295314[K    [247/1000] max fitness: -35.431929489295314[K    [248/1000] max fitness: -35.431929489295314[K    [249/1000] max fitness: -35.431929489295314[K    [250/1000] max fitness: -35.431929489295314[K    [251/1000] max fitness: -35.431929489295314[K    [252/1000] max fitness: -35.431929489295314[K    [253/1000] max fitness: -35.431929489295314[K    [254/1000] max fitness: -35.431929489295314[K    [255/1000] max fitness: -35.431929489295314[K    [256/1000] max fitness: -35.431929489295314[K    [257/1000] max fitness: -35.431929489295314[K    [258/1000] max fitness: -35.431929489295314[K    [259/1000] max fitness: -35.431929489295314[K    [260/1000] max fitness: -35.431929489295314[K    [261/1000] max fitness: -35.431929489295314[K    [262/1000] max fitness: -35.431929489295314[K    [263/1000] max fitness: -35.431929489295314[K    [264/1000] max fitness: -35.431929489295314[K    [265/1000] max fitness: -35.431929489295314[K    [266/1000] max fitness: -35.431929489295314[K    [267/1000] max fitness: -35.431929489295314[K    [268/1000] max fitness: -35.431929489295314[K    [269/1000] max fitness: -35.431929489295314[K    [270/1000] max fitness: -35.431929489295314[K    [271/1000] max fitness: -35.431929489295314[K    [272/1000] max fitness: -35.431929489295314[K    [273/1000] max fitness: -35.431929489295314[K    [274/1000] max fitness: -35.431929489295314[K    [275/1000] max fitness: -35.431929489295314[K    [276/1000] max fitness: -35.431929489295314[K    [277/1000] max fitness: -35.431929489295314[K    [278/1000] max fitness: -35.431929489295314[K    [279/1000] max fitness: -35.431929489295314[K    [280/1000] max fitness: -35.431929489295314[K    [281/1000] max fitness: -35.431929489295314[K    [282/1000] max fitness: -35.431929489295314[K    [283/1000] max fitness: -35.431929489295314[K    [284/1000] max fitness: -35.431929489295314[K    [285/1000] max fitness: -35.431929489295314[K    [286/1000] max fitness: -35.431929489295314[K    [287/1000] max fitness: -35.431929489295314[K    [288/1000] max fitness: -35.43192948929531[K    [289/1000] max fitness: -35.43192948929531[K    [290/1000] max fitness: -35.43192948929531[K    [291/1000] max fitness: -35.43192948929531[K    [292/1000] max fitness: -35.43192948929531[K    [293/1000] max fitness: -35.43192948929531[K    [294/1000] max fitness: -35.43192948929531[K    [295/1000] max fitness: -35.43192948929531[K    [296/1000] max fitness: -35.43192948929531[K    [297/1000] max fitness: -35.43192948929531[K    [298/1000] max fitness: -35.43192948929531[K    [299/1000] max fitness: -35.43192948929531[K    [300/1000] max fitness: -35.43192948929531[K    [301/1000] max fitness: -35.43192948929531[K    [302/1000] max fitness: -35.43192948929531[K    [303/1000] max fitness: -35.43192948929531[K    [304/1000] max fitness: -35.43192948929531[K    [305/1000] max fitness: -35.43192948929531[K    [306/1000] max fitness: -35.43192948929531[K    [307/1000] max fitness: -35.43192948929531[K    [308/1000] max fitness: -35.43192948929531[K    [309/1000] max fitness: -35.43192948929531[K    [310/1000] max fitness: -35.43192948929531[K    [311/1000] max fitness: -35.43192948929531[K    [312/1000] max fitness: -35.43192948929531[K    [313/1000] max fitness: -35.43192948929531[K    [314/1000] max fitness: -35.43192948929531[K    [315/1000] max fitness: -35.43192948929531[K    [316/1000] max fitness: -35.43192948929531[K    [317/1000] max fitness: -35.43192948929531[K    [318/1000] max fitness: -35.43192948929531[K    [319/1000] max fitness: -35.43192948929531[K    [320/1000] max fitness: -35.43192948929531[K    [321/1000] max fitness: -35.43192948929531[K    [322/1000] max fitness: -35.43192948929531[K    [323/1000] max fitness: -35.43192948929531[K    [324/1000] max fitness: -35.43192948929531[K    [325/1000] max fitness: -35.43192948929531[K    [326/1000] max fitness: -35.43192948929531[K    [327/1000] max fitness: -35.43192948929531[K    [328/1000] max fitness: -35.43192948929531[K    [329/1000] max fitness: -35.43192948929531[K    [330/1000] max fitness: -35.43192948929531[K    [331/1000] max fitness: -35.43192948929531[K    [332/1000] max fitness: -35.43192948929531[K    [333/1000] max fitness: -35.43192948929531[K    [334/1000] max fitness: -35.43192948929531[K    [335/1000] max fitness: -35.43192948929531[K    [336/1000] max fitness: -35.43192948929531[K    [337/1000] max fitness: -35.43192948929531[K    [338/1000] max fitness: -35.43192948929531[K    [339/1000] max fitness: -35.43192948929531[K    [340/1000] max fitness: -35.43192948929531[K    [341/1000] max fitness: -35.43192948929531[K    [342/1000] max fitness: -35.43192948929531[K    [343/1000] max fitness: -35.43192948929531[K    [344/1000] max fitness: -35.43192948929531[K    [345/1000] max fitness: -35.43192948929531[K    [346/1000] max fitness: -35.43192948929531[K    [347/1000] max fitness: -35.43192948929531[K    [348/1000] max fitness: -35.43192948929531[K    [349/1000] max fitness: -35.43192948929531[K    [350/1000] max fitness: -35.43192948929531[K    [351/1000] max fitness: -35.43192948929531[K    [352/1000] max fitness: -35.43192948929531[K    [353/1000] max fitness: -35.43192948929531[K    [354/1000] max fitness: -35.43192948929531[K    [355/1000] max fitness: -35.43192948929531[K    [356/1000] max fitness: -35.43192948929531[K    [357/1000] max fitness: -35.43192948929531[K    [358/1000] max fitness: -35.43192948929531[K    [359/1000] max fitness: -35.43192948929531[K    [360/1000] max fitness: -35.43192948929531[K    [361/1000] max fitness: -35.43192948929531[K    [362/1000] max fitness: -35.43192948929531[K    [363/1000] max fitness: -35.43192948929531[K    [364/1000] max fitness: -35.43192948929531[K    [365/1000] max fitness: -35.43192948929531[K    [366/1000] max fitness: -35.43192948929531[K    [367/1000] max fitness: -35.43192948929531[K    [368/1000] max fitness: -35.43192948929531[K    [369/1000] max fitness: -35.43192948929531[K    [370/1000] max fitness: -35.43192948929531[K    [371/1000] max fitness: -35.43192948929531[K    [372/1000] max fitness: -35.43192948929531[K    [373/1000] max fitness: -35.43192948929531[K    [374/1000] max fitness: -35.43192948929531[K    [375/1000] max fitness: -35.43192948929531[K    [376/1000] max fitness: -35.43192948929531[K    [377/1000] max fitness: -35.43192948929531[K    [378/1000] max fitness: -35.43192948929531[K    [379/1000] max fitness: -35.43192948929531[K    [380/1000] max fitness: -35.43192948929531[K    [381/1000] max fitness: -35.43192948929531[K    [382/1000] max fitness: -35.43192948929531[K    [383/1000] max fitness: -35.43192948929531[K    [384/1000] max fitness: -35.43192948929531[K    [385/1000] max fitness: -35.43192948929531[K    [386/1000] max fitness: -35.43192948929531[K    [387/1000] max fitness: -35.43192948929531[K    [388/1000] max fitness: -35.43192948929531[K    [389/1000] max fitness: -35.43192948929531[K    [390/1000] max fitness: -35.43192948929531[K    [391/1000] max fitness: -35.43192948929531[K    [392/1000] max fitness: -35.43192948929531[K    [393/1000] max fitness: -35.43192948929531[K    [394/1000] max fitness: -35.43192948929531[K    [395/1000] max fitness: -35.43192948929531[K    [396/1000] max fitness: -35.43192948929531[K    [397/1000] max fitness: -35.43192948929531[K    [398/1000] max fitness: -35.43192948929531[K    [399/1000] max fitness: -35.43192948929531[K    [400/1000] max fitness: -35.43192948929531[K    [401/1000] max fitness: -35.43192948929531[K    [402/1000] max fitness: -35.43192948929531[K    [403/1000] max fitness: -35.43192948929531[K    [404/1000] max fitness: -35.43192948929531[K    [405/1000] max fitness: -35.43192948929531[K    [406/1000] max fitness: -35.43192948929531[K    [407/1000] max fitness: -35.43192948929531[K    [408/1000] max fitness: -35.43192948929531[K    [409/1000] max fitness: -35.43192948929531[K    [410/1000] max fitness: -35.43192948929531[K    [411/1000] max fitness: -35.43192948929531[K    [412/1000] max fitness: -35.43192948929531[K    [413/1000] max fitness: -35.43192948929531[K    [414/1000] max fitness: -35.43192948929531[K    [415/1000] max fitness: -35.43192948929531[K    [416/1000] max fitness: -35.43192948929531[K    [417/1000] max fitness: -35.43192948929531[K    [418/1000] max fitness: -35.43192948929531[K    [419/1000] max fitness: -34.353365361124155[K    [420/1000] max fitness: -34.353365361124155[K    [421/1000] max fitness: -34.353365361124155[K    [422/1000] max fitness: -34.353365361124155[K    [423/1000] max fitness: -34.353365361124155[K    [424/1000] max fitness: -34.353365361124155[K    [425/1000] max fitness: -34.353365361124155[K    [426/1000] max fitness: -34.353365361124155[K    [427/1000] max fitness: -34.353365361124155[K    [428/1000] max fitness: -1.0[K    [429/1000] max fitness: -1.0[K    [430/1000] max fitness: -1.0[K    [431/1000] max fitness: -1.0[K    [432/1000] max fitness: -1.0[K    [433/1000] max fitness: -1.0[K    [434/1000] max fitness: -4.0589305477380354e-30[K
    [2/1000] max fitness: -36.59431062909841[K    [3/1000] max fitness: -36.59431062909841[K    [4/1000] max fitness: -36.59431062909841[K    [5/1000] max fitness: -36.59431062909841[K    [6/1000] max fitness: -36.59431062909841[K    [7/1000] max fitness: -36.59431062909841[K    [8/1000] max fitness: -36.58422103735176[K    [9/1000] max fitness: -36.58422103735176[K    [10/1000] max fitness: -36.58422103735176[K    [11/1000] max fitness: -36.58422103735176[K    [12/1000] max fitness: -36.58422103735176[K    [13/1000] max fitness: -36.58422103735176[K    [14/1000] max fitness: -36.58422103735176[K    [15/1000] max fitness: -36.58422103735176[K    [16/1000] max fitness: -36.58422103735176[K    [17/1000] max fitness: -36.58422103735176[K    [18/1000] max fitness: -36.58422103735176[K    [19/1000] max fitness: -36.58422103735176[K    [20/1000] max fitness: -36.58422103735176[K    [21/1000] max fitness: -36.58422103735176[K    [22/1000] max fitness: -36.58422103735176[K    [23/1000] max fitness: -36.58422103735176[K    [24/1000] max fitness: -36.58422103735176[K    [25/1000] max fitness: -36.58422103735176[K    [26/1000] max fitness: -36.58422103735176[K    [27/1000] max fitness: -36.58422103735176[K    [28/1000] max fitness: -36.58422103735176[K    [29/1000] max fitness: -36.58422103735176[K    [30/1000] max fitness: -36.58422103735176[K    [31/1000] max fitness: -36.58422103735176[K    [32/1000] max fitness: -36.58422103735176[K    [33/1000] max fitness: -36.58422103735176[K    [34/1000] max fitness: -36.58422103735176[K    [35/1000] max fitness: -36.58422103735176[K    [36/1000] max fitness: -36.58422103735176[K    [37/1000] max fitness: -36.58422103735176[K    [38/1000] max fitness: -36.58422103735176[K    [39/1000] max fitness: -36.58422103735176[K    [40/1000] max fitness: -36.58422103735176[K    [41/1000] max fitness: -36.58422103735176[K    [42/1000] max fitness: -36.58422103735176[K    [43/1000] max fitness: -36.58422103735176[K    [44/1000] max fitness: -36.58422103735176[K    [45/1000] max fitness: -36.58422103735176[K    [46/1000] max fitness: -36.58422103735176[K    [47/1000] max fitness: -36.58422103735176[K    [48/1000] max fitness: -36.58422103735176[K    [49/1000] max fitness: -36.58422103735176[K    [50/1000] max fitness: -36.58422103735176[K    [51/1000] max fitness: -36.58422103735176[K    [52/1000] max fitness: -36.58422103735176[K    [53/1000] max fitness: -36.58422103735176[K    [54/1000] max fitness: -36.58422103735176[K    [55/1000] max fitness: -36.58422103735176[K    [56/1000] max fitness: -36.58422103735176[K    [57/1000] max fitness: -36.58422103735176[K    [58/1000] max fitness: -36.58422103735176[K    [59/1000] max fitness: -36.58422103735176[K    [60/1000] max fitness: -36.58422103735176[K    [61/1000] max fitness: -36.58422103735176[K    [62/1000] max fitness: -36.58422103735176[K    [63/1000] max fitness: -36.58422103735176[K    [64/1000] max fitness: -36.58422103735176[K    [65/1000] max fitness: -36.58422103735176[K    [66/1000] max fitness: -36.58422103735176[K    [67/1000] max fitness: -36.58422103735176[K    [68/1000] max fitness: -36.58422103735176[K    [69/1000] max fitness: -36.58422103735176[K    [70/1000] max fitness: -36.58422103735176[K    [71/1000] max fitness: -36.58422103735176[K    [72/1000] max fitness: -36.58422103735176[K    [73/1000] max fitness: -36.58422103735176[K    [74/1000] max fitness: -36.58422103735176[K    [75/1000] max fitness: -36.58422103735176[K    [76/1000] max fitness: -36.58422103735176[K    [77/1000] max fitness: -36.58422103735176[K    [78/1000] max fitness: -36.58422103735176[K    [79/1000] max fitness: -36.58422103735176[K    [80/1000] max fitness: -36.58422103735176[K    [81/1000] max fitness: -36.58422103735176[K    [82/1000] max fitness: -36.58422103735176[K    [83/1000] max fitness: -36.58422103735176[K    [84/1000] max fitness: -36.58422103735176[K    [85/1000] max fitness: -36.58422103735176[K    [86/1000] max fitness: -36.58422103735176[K    [87/1000] max fitness: -36.58422103735176[K    [88/1000] max fitness: -36.58422103735176[K    [89/1000] max fitness: -36.58422103735176[K    [90/1000] max fitness: -36.58422103735176[K    [91/1000] max fitness: -36.58422103735176[K    [92/1000] max fitness: -36.58422103735176[K    [93/1000] max fitness: -36.58422103735176[K    [94/1000] max fitness: -36.58422103735176[K    [95/1000] max fitness: -36.58422103735176[K    [96/1000] max fitness: -36.58422103735176[K    [97/1000] max fitness: -36.58422103735176[K    [98/1000] max fitness: -36.58422103735176[K    [99/1000] max fitness: -36.58422103735176[K    [100/1000] max fitness: -36.58422103735176[K    [101/1000] max fitness: -36.58422103735176[K    [102/1000] max fitness: -36.58422103735176[K    [103/1000] max fitness: -36.58422103735176[K    [104/1000] max fitness: -36.58422103735176[K    [105/1000] max fitness: -36.58422103735176[K    [106/1000] max fitness: -36.58422103735176[K    [107/1000] max fitness: -36.58422103735176[K    [108/1000] max fitness: -36.58422103735176[K    [109/1000] max fitness: -36.58422103735176[K    [110/1000] max fitness: -36.58422103735176[K    [111/1000] max fitness: -36.58422103735176[K    [112/1000] max fitness: -36.58422103735176[K    [113/1000] max fitness: -36.58422103735176[K    [114/1000] max fitness: -36.58422103735176[K    [115/1000] max fitness: -36.58422103735176[K    [116/1000] max fitness: -36.58422103735176[K    [117/1000] max fitness: -36.58422103735176[K    [118/1000] max fitness: -36.58422103735176[K    [119/1000] max fitness: -36.58422103735176[K    [120/1000] max fitness: -36.58422103735176[K    [121/1000] max fitness: -36.58422103735176[K    [122/1000] max fitness: -36.58422103735176[K    [123/1000] max fitness: -36.58422103735176[K    [124/1000] max fitness: -36.58422103735176[K    [125/1000] max fitness: -36.58422103735176[K    [126/1000] max fitness: -36.58422103735176[K    [127/1000] max fitness: -36.58422103735176[K    [128/1000] max fitness: -36.58422103735176[K    [129/1000] max fitness: -36.58422103735176[K    [130/1000] max fitness: -36.58422103735176[K    [131/1000] max fitness: -36.58422103735176[K    [132/1000] max fitness: -36.58422103735176[K    [133/1000] max fitness: -36.58422103735176[K    [134/1000] max fitness: -36.58422103735176[K    [135/1000] max fitness: -36.58422103735176[K    [136/1000] max fitness: -36.58422103735176[K    [137/1000] max fitness: -36.58422103735176[K    [138/1000] max fitness: -36.58422103735176[K    [139/1000] max fitness: -36.58422103735176[K    [140/1000] max fitness: -36.58422103735176[K    [141/1000] max fitness: -36.58422103735176[K    [142/1000] max fitness: -36.58422103735176[K    [143/1000] max fitness: -36.58422103735176[K    [144/1000] max fitness: -36.58422103735176[K    [145/1000] max fitness: -36.58422103735176[K    [146/1000] max fitness: -36.58422103735176[K    [147/1000] max fitness: -36.33926583322508[K    [148/1000] max fitness: -36.33926583322508[K    [149/1000] max fitness: -36.33926583322508[K    [150/1000] max fitness: -36.33926583322508[K    [151/1000] max fitness: -36.33926583322508[K    [152/1000] max fitness: -36.33926583322508[K    [153/1000] max fitness: -36.33926583322508[K    [154/1000] max fitness: -36.33926583322508[K    [155/1000] max fitness: -36.33926583322508[K    [156/1000] max fitness: -36.33926583322508[K    [157/1000] max fitness: -36.33926583322508[K    [158/1000] max fitness: -36.33926583322508[K    [159/1000] max fitness: -36.33926583322508[K    [160/1000] max fitness: -36.33926583322508[K    [161/1000] max fitness: -36.33926583322508[K    [162/1000] max fitness: -36.33926583322508[K    [163/1000] max fitness: -36.33926583322508[K    [164/1000] max fitness: -36.33926583322508[K    [165/1000] max fitness: -36.33926583322508[K    [166/1000] max fitness: -36.33926583322508[K    [167/1000] max fitness: -36.33926583322508[K    [168/1000] max fitness: -36.33926583322508[K    [169/1000] max fitness: -36.33926583322508[K    [170/1000] max fitness: -36.33926583322508[K    [171/1000] max fitness: -36.33926583322508[K    [172/1000] max fitness: -36.33926583322508[K    [173/1000] max fitness: -36.33926583322508[K    [174/1000] max fitness: -36.33926583322508[K    [175/1000] max fitness: -36.33926583322508[K    [176/1000] max fitness: -36.33926583322508[K    [177/1000] max fitness: -36.33926583322508[K    [178/1000] max fitness: -36.33926583322508[K    [179/1000] max fitness: -36.33926583322508[K    [180/1000] max fitness: -36.33926583322508[K    [181/1000] max fitness: -36.33926583322508[K    [182/1000] max fitness: -36.33926583322508[K    [183/1000] max fitness: -36.33926583322508[K    [184/1000] max fitness: -36.33926583322508[K    [185/1000] max fitness: -36.33926583322508[K    [186/1000] max fitness: -36.33926583322508[K    [187/1000] max fitness: -36.33926583322508[K    [188/1000] max fitness: -36.33926583322508[K    [189/1000] max fitness: -36.33926583322508[K    [190/1000] max fitness: -36.33926583322508[K    [191/1000] max fitness: -36.33926583322508[K    [192/1000] max fitness: -36.33926583322508[K    [193/1000] max fitness: -36.33926583322508[K    [194/1000] max fitness: -36.33926583322508[K    [195/1000] max fitness: -36.33926583322508[K    [196/1000] max fitness: -36.33926583322508[K    [197/1000] max fitness: -36.33926583322508[K    [198/1000] max fitness: -36.33926583322508[K    [199/1000] max fitness: -36.33926583322508[K    [200/1000] max fitness: -36.33926583322508[K    [201/1000] max fitness: -36.33926583322508[K    [202/1000] max fitness: -36.33926583322508[K    [203/1000] max fitness: -36.33926583322508[K    [204/1000] max fitness: -36.33926583322508[K    [205/1000] max fitness: -36.33926583322508[K    [206/1000] max fitness: -36.33926583322508[K    [207/1000] max fitness: -36.33926583322508[K    [208/1000] max fitness: -36.33926583322508[K    [209/1000] max fitness: -36.33926583322508[K    [210/1000] max fitness: -36.33926583322508[K    [211/1000] max fitness: -36.33926583322508[K    [212/1000] max fitness: -36.33926583322508[K    [213/1000] max fitness: -36.33926583322508[K    [214/1000] max fitness: -36.33926583322508[K    [215/1000] max fitness: -36.33926583322508[K    [216/1000] max fitness: -36.33926583322508[K    [217/1000] max fitness: -36.33926583322508[K    [218/1000] max fitness: -36.33926583322508[K    [219/1000] max fitness: -12.138488065527952[K    [220/1000] max fitness: -12.138488065527952[K    [221/1000] max fitness: -12.138488065527952[K    [222/1000] max fitness: -12.138488065527952[K    [223/1000] max fitness: -12.138488065527952[K    [224/1000] max fitness: -12.138488065527952[K    [225/1000] max fitness: -12.138488065527952[K    [226/1000] max fitness: -12.138488065527952[K    [227/1000] max fitness: -9.643532861401276[K    [228/1000] max fitness: -9.643532861401276[K    [229/1000] max fitness: -1.0[K    [230/1000] max fitness: -1.0[K    [231/1000] max fitness: -1.0[K    [232/1000] max fitness: -1.0[K    [233/1000] max fitness: -1.0[K    [234/1000] max fitness: -1.0[K    [235/1000] max fitness: -1.0[K    [236/1000] max fitness: -1.0[K    [237/1000] max fitness: -1.0[K    [238/1000] max fitness: -1.0[K    [239/1000] max fitness: -1.0[K    [240/1000] max fitness: -1.0[K    [241/1000] max fitness: -1.0[K    [242/1000] max fitness: -1.0[K    [243/1000] max fitness: -1.0[K    [244/1000] max fitness: -1.0[K    [245/1000] max fitness: -1.0[K    [246/1000] max fitness: -1.0[K    [247/1000] max fitness: -1.0[K    [248/1000] max fitness: -1.0[K    [249/1000] max fitness: -1.0[K    [250/1000] max fitness: -1.0[K    [251/1000] max fitness: -1.0[K    [252/1000] max fitness: -1.0[K    [253/1000] max fitness: -1.0[K    [254/1000] max fitness: -1.0[K    [255/1000] max fitness: -1.0[K    [256/1000] max fitness: -1.0[K    [257/1000] max fitness: -1.0[K    [258/1000] max fitness: -1.0[K    [259/1000] max fitness: -1.0[K    [260/1000] max fitness: -1.0[K    [261/1000] max fitness: -1.0[K    [262/1000] max fitness: -1.0[K    [263/1000] max fitness: -1.0[K    [264/1000] max fitness: -1.0[K    [265/1000] max fitness: -1.0[K    [266/1000] max fitness: -1.0[K    [267/1000] max fitness: -1.0[K    [268/1000] max fitness: -1.0[K    [269/1000] max fitness: -1.0[K    [270/1000] max fitness: -1.0[K    [271/1000] max fitness: -1.0[K    [272/1000] max fitness: -1.0[K    [273/1000] max fitness: -1.0[K    [274/1000] max fitness: -1.0[K    [275/1000] max fitness: -1.0[K    [276/1000] max fitness: -1.0[K    [277/1000] max fitness: -1.0[K    [278/1000] max fitness: -1.0[K    [279/1000] max fitness: -1.0[K    [280/1000] max fitness: -1.0[K    [281/1000] max fitness: -1.0[K    [282/1000] max fitness: -1.0[K    [283/1000] max fitness: -1.0[K    [284/1000] max fitness: -1.0[K    [285/1000] max fitness: -1.0[K    [286/1000] max fitness: -1.0[K    [287/1000] max fitness: -1.0[K    [288/1000] max fitness: -1.0[K    [289/1000] max fitness: -1.0[K    [290/1000] max fitness: -1.0[K    [291/1000] max fitness: -1.0[K    [292/1000] max fitness: -1.0[K    [293/1000] max fitness: -1.0[K    [294/1000] max fitness: -1.0[K    [295/1000] max fitness: -1.0[K    [296/1000] max fitness: -1.0[K    [297/1000] max fitness: -1.0[K    [298/1000] max fitness: -1.0[K    [299/1000] max fitness: -1.0[K    [300/1000] max fitness: -1.0[K    [301/1000] max fitness: -1.0[K    [302/1000] max fitness: -1.0[K    [303/1000] max fitness: -1.0[K    [304/1000] max fitness: -1.0[K    [305/1000] max fitness: -1.0[K    [306/1000] max fitness: -1.0[K    [307/1000] max fitness: -1.0[K    [308/1000] max fitness: -1.0[K    [309/1000] max fitness: -1.0[K    [310/1000] max fitness: -1.0[K    [311/1000] max fitness: -1.0[K    [312/1000] max fitness: -1.0[K    [313/1000] max fitness: -1.0[K    [314/1000] max fitness: -1.0[K    [315/1000] max fitness: -1.0[K    [316/1000] max fitness: -1.0[K    [317/1000] max fitness: -1.0[K    [318/1000] max fitness: -1.0[K    [319/1000] max fitness: -1.0[K    [320/1000] max fitness: -1.0[K    [321/1000] max fitness: -1.0[K    [322/1000] max fitness: -1.0[K    [323/1000] max fitness: -1.0[K    [324/1000] max fitness: -1.0[K    [325/1000] max fitness: -1.0[K    [326/1000] max fitness: -1.0[K    [327/1000] max fitness: -1.0[K    [328/1000] max fitness: -1.0[K    [329/1000] max fitness: -1.0[K    [330/1000] max fitness: -1.0[K    [331/1000] max fitness: -1.0[K    [332/1000] max fitness: -1.0[K    [333/1000] max fitness: -1.0[K    [334/1000] max fitness: -1.0[K    [335/1000] max fitness: -1.0[K    [336/1000] max fitness: -1.0[K    [337/1000] max fitness: -1.0[K    [338/1000] max fitness: -1.0[K    [339/1000] max fitness: -1.0[K    [340/1000] max fitness: -1.0[K    [341/1000] max fitness: -1.0[K    [342/1000] max fitness: -1.0[K    [343/1000] max fitness: -1.0[K    [344/1000] max fitness: -1.0[K    [345/1000] max fitness: -1.0[K    [346/1000] max fitness: -1.0[K    [347/1000] max fitness: -1.0[K    [348/1000] max fitness: -1.0[K    [349/1000] max fitness: -1.0[K    [350/1000] max fitness: -1.0[K    [351/1000] max fitness: -1.0[K    [352/1000] max fitness: -1.0[K    [353/1000] max fitness: -1.0[K    [354/1000] max fitness: -1.0[K    [355/1000] max fitness: -1.0[K    [356/1000] max fitness: -1.0[K    [357/1000] max fitness: -1.0[K    [358/1000] max fitness: -1.0[K    [359/1000] max fitness: -1.0[K    [360/1000] max fitness: -1.0[K    [361/1000] max fitness: -1.0[K    [362/1000] max fitness: -1.0[K    [363/1000] max fitness: -1.0[K    [364/1000] max fitness: -1.0[K    [365/1000] max fitness: -1.0[K    [366/1000] max fitness: -1.0[K    [367/1000] max fitness: -1.0[K    [368/1000] max fitness: -1.0[K    [369/1000] max fitness: -1.0[K    [370/1000] max fitness: -1.0[K    [371/1000] max fitness: -1.0[K    [372/1000] max fitness: -1.0[K    [373/1000] max fitness: -1.0[K    [374/1000] max fitness: -1.0[K    [375/1000] max fitness: -1.0[K    [376/1000] max fitness: -1.0[K    [377/1000] max fitness: -1.0[K    [378/1000] max fitness: -1.0[K    [379/1000] max fitness: -1.0[K    [380/1000] max fitness: -1.0[K    [381/1000] max fitness: -1.0[K    [382/1000] max fitness: -1.0[K    [383/1000] max fitness: -1.0[K    [384/1000] max fitness: -1.0[K    [385/1000] max fitness: -1.0[K    [386/1000] max fitness: -1.0[K    [387/1000] max fitness: -1.0[K    [388/1000] max fitness: -1.0[K    [389/1000] max fitness: -1.0[K    [390/1000] max fitness: -1.0[K    [391/1000] max fitness: -1.0[K    [392/1000] max fitness: -1.0[K    [393/1000] max fitness: -1.0[K    [394/1000] max fitness: -1.0[K    [395/1000] max fitness: -1.0[K    [396/1000] max fitness: -1.0[K    [397/1000] max fitness: -1.0[K    [398/1000] max fitness: -1.0[K    [399/1000] max fitness: -1.0[K    [400/1000] max fitness: -1.0[K    [401/1000] max fitness: -1.0[K    [402/1000] max fitness: -1.0[K    [403/1000] max fitness: -1.0[K    [404/1000] max fitness: -1.0[K    [405/1000] max fitness: -1.0[K    [406/1000] max fitness: -1.0[K    [407/1000] max fitness: -1.0[K    [408/1000] max fitness: -1.0[K    [409/1000] max fitness: -1.0[K    [410/1000] max fitness: -1.1037576169418875e-32[K





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  24.526 seconds)


.. _sphx_glr_download_auto_examples_example_evo_regression.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_evo_regression.py <example_evo_regression.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_evo_regression.ipynb <example_evo_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
